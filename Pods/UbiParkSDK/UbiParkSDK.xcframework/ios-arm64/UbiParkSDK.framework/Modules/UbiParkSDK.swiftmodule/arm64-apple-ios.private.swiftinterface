// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UbiParkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
import Swift
import UIKit
@_exported import UbiParkSDK
import _Concurrency
import _StringProcessing
public class LaneResult : Swift.Codable {
  public var laneId: Swift.Int64
  public var laneType: Swift.Int64
  public var laneGroupId: Swift.Int64?
  public var laneGroupDelay: Swift.Int64?
  public var detectionType: Swift.Int64
  public var minRSSI: Swift.Int64
  public var minDetectionSecs: Swift.Int64
  public var maxDetectionSecs: Swift.Int64
  public var retrySecs: Swift.Int64?
  public var sortOrder: Swift.Int64
  public var name: Swift.String
  public var shortName: Swift.String
  public var beaconSensitivity: Swift.Int64
  public var laneSensitivity: Swift.Int64
  public var laneBeacons: [UbiParkSDK.LaneBeaconResult]
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public static func toModel(laneResult: UbiParkSDK.LaneResult) -> UbiParkSDK.LaneModel
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class NoticeMessageResult : Swift.Codable {
  public var title: Swift.String
  public var message: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class LoginRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var email: Swift.String
  public var password: Swift.String
  public var facebookAccessToken: Swift.String?
  public var appleIdAccessToken: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class UserResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var userId: Swift.Int64
  public var authenticationToken: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class AuthTokenResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var userId: Swift.Int64
  public var authenticationToken: Swift.String
  public init(result: Swift.String = "", message: Swift.String = "", errorCode: Swift.String = "", userId: Swift.Int64 = -1, authenticationToken: Swift.String = "")
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class DetailResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var accountType: Swift.String
  public var email: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var phoneNo: Swift.String
  public var homeCarParkId: Swift.Int64?
  public var homeCarParkName: Swift.String
  public var groupZoneName: Swift.String
  public var groupZoneColourCode: Swift.String
  public var groupZoneCode: Swift.String
  public var homeCarParkLatitude: Swift.Double?
  public var homeCarParkLongitude: Swift.Double?
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class LaneModel : Swift.Equatable {
  public var laneId: Swift.Int64
  public var laneType: Swift.Int64?
  public var laneGroupId: Swift.Int64?
  public var laneGroupDelay: Swift.Int64?
  public var detectionType: Swift.Int64?
  public var minRSSI: Swift.Int64?
  public var minDetectionSecs: Swift.Int64?
  public var maxDetectionSecs: Swift.Int64?
  public var retrySecs: Swift.Int64?
  public var sortOrder: Swift.Int64?
  public var name: Swift.String
  public var shortName: Swift.String
  public var beaconSensitivity: Swift.Int64?
  public var laneSensitivity: Swift.Int64?
  public var laneBeacons: [UbiParkSDK.LaneBeaconModel]
  public var rssi: Swift.Int64
  public var carPark: UbiParkSDK.CarParkModel?
  public var closest: Swift.Bool
  public init()
  public func getMinRSSI() -> Swift.Int64
  public func getMinDetectionSecs() -> Swift.Int64
  public func getMaxDetectionSecs() -> Swift.Int64
  public func getRetrySecs() -> Swift.Int64
  public static func == (lhs: UbiParkSDK.LaneModel, rhs: UbiParkSDK.LaneModel) -> Swift.Bool
  @objc deinit
}
public class DetailsResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var carParkId: Swift.Int64
  public var carParkName: Swift.String
  public var availableSpaces: Swift.Int64
  public var homeCarPark: Swift.Bool
  public var lanes: [UbiParkSDK.LaneResult]
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public static func toModel(detailsResult: UbiParkSDK.DetailsResult) -> UbiParkSDK.CarParkModel
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class NoticeRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var beacons: [UbiParkSDK.NoticeBeaconRequest]
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CreateUserResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var userId: Swift.Int64
  public var authenticationToken: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class BeaconPayloadResult : Swift.Codable {
  public var result: Swift.String?
  public var message: Swift.String?
  public var errorCode: Swift.String?
  public init(result: Swift.String? = nil, message: Swift.String? = nil, errorCode: Swift.String? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class DetailsRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var beaconID: Swift.String?
  public var carParkID: Swift.Int64?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class UpdateResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class UserRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var email: Swift.String
  public var firstname: Swift.String
  public var lastname: Swift.String
  public var phoneNo: Swift.String
  public var password: Swift.String
  public var facebookAccessToken: Swift.String
  public var appleIdAccessToken: Swift.String
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class NoticeBeaconRequest : Swift.Codable {
  public var beaconId: Swift.String
  public var rssi: Swift.Double
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BeaconPayloadItem : Swift.Codable {
  public var laneID: Swift.Int64
  public var closest: Swift.Bool
  public var rssi: Swift.Int64
  public var timestampUTC: Foundation.Date
  public var details: [UbiParkSDK.BeaconPayloadDetail]
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class LaneBeaconModel {
  public var laneBeaconId: Swift.Int64
  public var beaconId: Swift.String
  public var beaconName: Swift.String
  public var beaconSerialNo: Swift.String
  public var rssi: Swift.Int64
  public var rssiSmoothed: Swift.Int64
  public var proximity: Swift.Int64
  public var accuracy: Swift.Double
  public var measuredPowerAt1Meter: Swift.Int64
  public var history: [UbiParkSDK.LaneBeaconModel]
  public init()
  public func copy(laneBeaconModel: UbiParkSDK.LaneBeaconModel) -> UbiParkSDK.LaneBeaconModel
  @objc deinit
}
public class BeaconPayloadDetail : Swift.Codable {
  public var beaconID: Swift.String
  public var beaconName: Swift.String
  public var beaconSerialNo: Swift.String
  public var rssi: Swift.Int64
  public var rssiSmoothed: Swift.Int64
  public var proximity: Swift.Int64
  public var accuracy: Swift.Double
  public var measuredPowerAt1Meter: Swift.Int64
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol BeaconServiceDelegate {
  func carParkNameChanged(_ carParkName: Swift.String)
  func carParkIdChanged(_ carParkId: Swift.Int64)
  func beaconsChanged(_ beacons: [UbiParkSDK.BeaconModel]?)
  func lanesChanged(_ lanes: [UbiParkSDK.LaneModel]?)
  func laneBeaconsChanged(_ laneBeacons: [UbiParkSDK.LaneModel]?)
  func closestLaneChanged(_ closestLane: UbiParkSDK.LaneModel?)
}
@_hasMissingDesignatedInitializers public class BeaconServiceResult : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BeaconService {
  public var delegate: (any UbiParkSDK.BeaconServiceDelegate)?
  public init()
  public func setTimerEnabled(enabled: Swift.Bool)
  public func getClosestLane() -> UbiParkSDK.LaneModel?
  public func getCarParkName() -> Swift.String
  public func getCarParkId() -> Swift.Int64
  public func initService()
  public func startService(completionBlock: @escaping (UbiParkSDK.BeaconServiceResult) -> Swift.Void)
  public func stopService(completionBlock: @escaping (UbiParkSDK.BeaconServiceResult) -> Swift.Void)
  public func onBackground()
  public func onForeground()
  public func onEnter()
  public func onExit()
  public func setUserStatus(userStatus: UbiParkSDK.StatusResult)
  @objc deinit
}
public class CarParkModel {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var carParkId: Swift.Int64
  public var carParkName: Swift.String
  public var availableSpaces: Swift.Int64
  public var homeCarPark: Swift.Bool
  public var lanes: [UbiParkSDK.LaneModel]
  public init()
  @objc deinit
}
public class StatusResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String?
  public var errorCode: Swift.String
  public var accountType: Swift.String
  public var emailConfirmed: Swift.Bool
  public var accessStatus: Swift.String
  public var inCarPark: Swift.Bool
  public var isNested: Swift.Bool
  public var entryTime: Foundation.Date?
  public var entryTimeUTC: Foundation.Date?
  public var serverTime: Foundation.Date?
  public var secondsInCarPark: Swift.Int64?
  public var homeCarParkId: Swift.Int64?
  public var homeCarParkName: Swift.String
  public var groupZoneName: Swift.String
  public var groupZoneColourCode: Swift.String
  public var groupZoneCode: Swift.String
  public var carParkId: Swift.Int64?
  public var carParkName: Swift.String
  public var casualAccess: Swift.Bool
  public var hasCard: Swift.Bool
  public var lanes: [UbiParkSDK.LaneResult]
  public var amount: Swift.Double?
  public var reservedBay: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class CreateUserRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var email: Swift.String
  public var firstname: Swift.String
  public var lastname: Swift.String
  public var phoneNo: Swift.String
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class EnterResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var reservedBay: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class DetailRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ExitResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var entryTime: Foundation.Date?
  public var secondsInCarPark: Swift.Int64?
  public var amount: Swift.Double?
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class StatusRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BeaconModel : Swift.Codable {
  public var beaconID: Swift.String
  public var serialNumber: Swift.String
  public var name: Swift.String
  public var rssi: Swift.Int64
  public var proximity: Swift.Int64
  public var accuracy: Swift.Double
  public var measuredPowerAt1Meter: Swift.Int64
  public var lastUpdated: Foundation.Date
  public init()
  public func update(beaconModel: UbiParkSDK.BeaconModel) -> Swift.Bool
  public static func toModel(beacon: CoreLocation.CLBeacon) -> UbiParkSDK.BeaconModel
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct NoticeLaneInfoResult : Swift.Codable {
  public var laneId: Swift.Int64
  public var shortName: Swift.String
  public var laneType: Swift.Int64
  public var beaconIds: [Swift.String]
  public init()
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CarParkAPI {
  public static func detail(beaconID: Swift.String?, carParkID: Swift.Int64?) -> UbiParkSDK.DetailsResult
  public static func detail(detailsRequest: UbiParkSDK.DetailsRequest) -> UbiParkSDK.DetailsResult
  public static func detail(detailsRequest: UbiParkSDK.DetailsRequest, completionBlock: @escaping (UbiParkSDK.DetailsResult?, (any Swift.Error)?) -> Swift.Void)
  public static func enter(laneId: Swift.Int64, calculatedLaneId: Swift.Int64?) -> UbiParkSDK.EnterResult
  public static func enter(enterRequest: UbiParkSDK.EnterRequest) -> UbiParkSDK.EnterResult
  public static func enter(enterRequest: UbiParkSDK.EnterRequest, completionBlock: @escaping (UbiParkSDK.EnterResult?, (any Swift.Error)?) -> Swift.Void)
  public static func exit(laneId: Swift.Int64, calculatedLaneId: Swift.Int64?) -> UbiParkSDK.ExitResult
  public static func exit(exitRequest: UbiParkSDK.ExitRequest) -> UbiParkSDK.ExitResult
  public static func exit(exitRequest: UbiParkSDK.ExitRequest, completionBlock: @escaping (UbiParkSDK.ExitResult?, (any Swift.Error)?) -> Swift.Void)
  public static func notification(beacons: [UbiParkSDK.NoticeBeaconRequest]) -> UbiParkSDK.NoticeResult
  public static func notification(noticeRequest: UbiParkSDK.NoticeRequest) -> UbiParkSDK.NoticeResult
  public static func notification(noticeRequest: UbiParkSDK.NoticeRequest, completionBlock: @escaping (UbiParkSDK.NoticeResult?, (any Swift.Error)?) -> Swift.Void)
  public static func beaconPayload(beaconPayloadRequest: UbiParkSDK.BeaconPayloadRequest) -> UbiParkSDK.BeaconPayloadResult
  public static func beaconPayload(beaconPayloadRequest: UbiParkSDK.BeaconPayloadRequest, completionBlock: @escaping (UbiParkSDK.BeaconPayloadResult?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserAPI {
  public static func create(email: Swift.String, firstname: Swift.String, lastname: Swift.String, phoneNo: Swift.String, password: Swift.String, facebookAccessToken: Swift.String, appleIdAccessToken: Swift.String) -> UbiParkSDK.UserResult
  public static func create(userRequest: UbiParkSDK.UserRequest) -> UbiParkSDK.UserResult
  public static func create(userRequest: UbiParkSDK.UserRequest, completionBlock: @escaping (UbiParkSDK.UserResult?, (any Swift.Error)?) -> Swift.Void)
  public static func createUser(email: Swift.String, firstname: Swift.String, lastname: Swift.String, phoneNo: Swift.String) -> UbiParkSDK.CreateUserResult
  public static func createUser(createUserRequest: UbiParkSDK.CreateUserRequest) -> UbiParkSDK.CreateUserResult
  public static func createUser(createUserRequest: UbiParkSDK.CreateUserRequest, completionBlock: @escaping (UbiParkSDK.CreateUserResult?, (any Swift.Error)?) -> Swift.Void)
  public static func detail() -> UbiParkSDK.DetailResult
  public static func detail(detailRequest: UbiParkSDK.DetailRequest) -> UbiParkSDK.DetailResult
  public static func detail(detailRequest: UbiParkSDK.DetailRequest, completionBlock: @escaping (UbiParkSDK.DetailResult?, (any Swift.Error)?) -> Swift.Void)
  public static func update(email: Swift.String, firstName: Swift.String, lastName: Swift.String, phoneNo: Swift.String) -> UbiParkSDK.UpdateResult
  public static func update(updateRequest: UbiParkSDK.UpdateRequest) -> UbiParkSDK.UpdateResult
  public static func update(updateRequest: UbiParkSDK.UpdateRequest, completionBlock: @escaping (UbiParkSDK.UpdateResult?, (any Swift.Error)?) -> Swift.Void)
  public static func login(username: Swift.String, password: Swift.String) -> UbiParkSDK.LoginResult
  public static func login(loginRequest: UbiParkSDK.LoginRequest) -> UbiParkSDK.LoginResult
  public static func login(username: Swift.String, password: Swift.String, completionBlock: @escaping (UbiParkSDK.LoginResult?, (any Swift.Error)?) -> Swift.Void)
  public static func login(loginRequest: UbiParkSDK.LoginRequest, completionBlock: @escaping (UbiParkSDK.LoginResult?, (any Swift.Error)?) -> Swift.Void)
  public static func authToken(email: Swift.String?, userId: Swift.Int64?) -> UbiParkSDK.AuthTokenResult
  public static func authToken(authTokenRequest: UbiParkSDK.AuthTokenRequest) -> UbiParkSDK.AuthTokenResult
  public static func authToken(authTokenRequest: UbiParkSDK.AuthTokenRequest, completionBlock: @escaping (UbiParkSDK.AuthTokenResult?, (any Swift.Error)?) -> Swift.Void)
  public static func status() -> UbiParkSDK.StatusResult
  public static func status(statusRequest: UbiParkSDK.StatusRequest) -> UbiParkSDK.StatusResult
  public static func status(statusRequest: UbiParkSDK.StatusRequest, completionBlock: @escaping (UbiParkSDK.StatusResult?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public enum BeaconLogLevel : Swift.Int, Swift.Comparable {
  case none
  case low
  case med
  case high
  case verbose
  public static func < (lhs: UbiParkSDK.BeaconLogLevel, rhs: UbiParkSDK.BeaconLogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct UbiParkSDKConfig {
  public static func getVersionNo() -> Swift.String
  public static func getAppId() -> Swift.String
  public static func setAppId(appId: Swift.String)
  @available(*, deprecated, message: "getBeaconToken is no longer required")
  public static func getBeaconToken() -> Swift.String
  @available(*, deprecated, message: "setBeaconToken is no longer required")
  public static func setBeaconToken(beaconToken: Swift.String)
  public static func getClientSecret() -> Swift.String
  public static func setClientSecret(clientSecret: Swift.String)
  public static func getCurrentLatitude() -> Swift.Double?
  public static func setCurrentLatitude(currentLatitude: Swift.Double?)
  public static func getCurrentLongitude() -> Swift.Double?
  public static func setCurrentLongitude(currentLongitude: Swift.Double?)
  public static func getServerName() -> Swift.String
  public static func setServerName(serverName: Swift.String)
  public static func getUserId() -> Swift.Int64
  public static func setUserId(userId: Swift.Int64)
  public static func getUserToken() -> Swift.String
  public static func setUserToken(userToken: Swift.String)
  public static func setUser(userId: Swift.Int64, userToken: Swift.String)
  public static func resetUser()
  public static func getAppName() -> Swift.String
  public static func setAppName(appName: Swift.String)
  public static func getAppPackageName() -> Swift.String
  public static func setAppPackageName(appPackageName: Swift.String)
  public static func getAppVersion() -> Swift.String
  public static func setAppVersion(appVersion: Swift.String)
  public static func getAppBuild() -> Swift.String
  public static func setAppBuild(appBuild: Swift.String)
  public static func getDeviceModel() -> Swift.String
  public static func setDeviceModel(deviceModel: Swift.String)
  public static func getDeviceManufacturer() -> Swift.String
  public static func setDeviceManufacturer(deviceManufacturer: Swift.String)
  public static func getDeviceName() -> Swift.String
  public static func setDeviceName(deviceName: Swift.String)
  public static func getDeviceVersion() -> Swift.String
  public static func setDeviceVersion(deviceVersion: Swift.String)
  public static func getDevicePlatform() -> Swift.String
  public static func setDevicePlatform(devicePlatform: Swift.String)
  public static func getDeviceIdiom() -> Swift.String
  public static func setDeviceIdiom(deviceIdiom: Swift.String)
  public static func getDeviceType() -> Swift.String
  public static func setDeviceType(deviceType: Swift.String)
  public static func getBeaconLogLevel() -> UbiParkSDK.BeaconLogLevel
  public static func setBeaconLogLevel(beaconLogLevel: UbiParkSDK.BeaconLogLevel)
  public static func getBeaconPayloadLogging() -> Swift.Bool
  public static func setBeaconPayloadLogging(enabled: Swift.Bool)
}
public class NoticeResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var shouldPopup: Swift.Bool
  public var noticeMessage: UbiParkSDK.NoticeMessageResult
  public var details: [UbiParkSDK.NoticeDetailResult]
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class UpdateRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var email: Swift.String
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var phoneNo: Swift.String
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class ExitRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var laneId: Swift.Int64
  public var calculatedLaneId: Swift.Int64?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class NoticeDetailResult : Swift.Codable {
  public var carParkID: Swift.Int64
  public var carParkName: Swift.String
  public var lanes: [UbiParkSDK.NoticeLaneInfoResult]
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class BeaconPayloadRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var inCarPark: Swift.Bool?
  public var isNested: Swift.Bool?
  public var reasonType: Swift.Int64?
  public var carParkID: Swift.Int64?
  public var calculatedLaneID: Swift.Int64?
  public var laneID: Swift.Int64?
  public var timestampUTC: Foundation.Date?
  public var items: [UbiParkSDK.BeaconPayloadItem]?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class LoginResult : Swift.Codable {
  public var result: Swift.String
  public var message: Swift.String
  public var errorCode: Swift.String
  public var userId: Swift.Int64
  public var authenticationToken: Swift.String
  public var emailConfirmed: Swift.Bool
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class LaneBeaconResult : Swift.Codable {
  public var laneBeaconId: Swift.Int64
  public var beaconId: Swift.String
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public static func toModel(laneBeaconResult: UbiParkSDK.LaneBeaconResult) -> UbiParkSDK.LaneBeaconModel
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class AuthTokenRequest : Swift.Codable {
  public var appId: Swift.String
  public var clientSecret: Swift.String
  public var userId: Swift.Int64?
  public var email: Swift.String?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class EnterRequest : Swift.Codable {
  public var appId: Swift.String?
  public var clientSecret: Swift.String?
  public var userId: Swift.Int64?
  public var userToken: Swift.String?
  public var currentLatitude: Swift.Double?
  public var currentLongitude: Swift.Double?
  public var appName: Swift.String?
  public var appPackageName: Swift.String?
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var deviceModel: Swift.String?
  public var deviceManufacturer: Swift.String?
  public var deviceName: Swift.String?
  public var deviceVersion: Swift.String?
  public var devicePlatform: Swift.String?
  public var deviceIdiom: Swift.String?
  public var deviceType: Swift.String?
  public var laneId: Swift.Int64
  public var calculatedLaneId: Swift.Int64?
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension UbiParkSDK.BeaconLogLevel : Swift.Hashable {}
extension UbiParkSDK.BeaconLogLevel : Swift.RawRepresentable {}
